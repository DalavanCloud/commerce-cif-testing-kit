##############################################################################
#
#    Copyright 2018 Adobe. All rights reserved.
#    This file is licensed to you under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License. You may obtain a copy
#    of the License at http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software distributed under
#    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
#    OF ANY KIND, either express or implied. See the License for the specific language
#    governing permissions and limitations under the License.
#
##############################################################################

input {
    openwhisk {
        # Mandatory Configuration Parameters
        hostname => "${OW_HOSTNAME}"
        username => "${OW_USERNAME}"
        password => "${OW_PASSWORD}"

        # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
        schedule => { "every" => "5s"}

        # Optional Configuration Parameters
        # Namespace is optional, defaults to user's default namespace.
        namespace => "${OW_NAMESPACE}"
        request_timeout => 60
        codec => "json"

        # A hash of request metadata info (timing, response headers, etc.) will be sent here
        metadata_target => "http_poller_metadata"
    }
}

filter {
    # Get data from HTTP request
    mutate {
        add_field => { "hostname" => "%{[http_poller_metadata][hostname]}" }
    }

    # Flatten annotations
    ruby { 
        code => "event.get('annotations').map { |a| event.set(a['key'], a['value'].tr('\"', ''))}" 
    }

    # Remove unecessary fields
    mutate {
        remove_field => [ "response", "logs", "http_poller_metadata", "annotations" ]
        convert => {
            "initTime" => "integer"
        }
    }

    # Calculate effective execution Time
    ruby {
        code => "event.get('initTime').nil? ? event.set('executionTime', event.get('duration')) : event.set('executionTime', event.get('duration') - event.get('initTime'))"
    }

    # Calculate absolute duration (difference between start and end)
    ruby {
        code => "event.set('absoluteDuration', event.get('end') - event.get('start'))"
    }

    # Convert dates
    date {
        match => ["start" , "UNIX_MS"]
        target => "start"
    }
    date {
        match => ["end" , "UNIX_MS"]
        target => "end"
    }
}

output {
    stdout {
        codec => json
        enable_metric => false
    }

    elasticsearch {
        hosts => ["elasticsearch-01", "elasticsearch-02"]
        index => "${ES_INDEX}"
        ssl => true
        user => "${ES_USERNAME}"
        password => "${ES_PASSWORD}"
        ssl_certificate_verification => false
        document_type => "activation"
    }
}